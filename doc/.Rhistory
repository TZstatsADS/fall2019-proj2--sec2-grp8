version = "2.1.0",
repos = "http://cran.us.r-project.org")
runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
shiny::runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
install_github('arilamstein/choroplethrZip@v1.4.0')
library(devtools)
install_github('arilamstein/choroplethrZip@v1.4.0')
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
install.packages("choroplethr")
install.packages("choroplethr")
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
zip_choropleth
render
c$render
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip")) install_github('arilamstein/choroplethrZip@v1.4.0')
if (!require("ggplot2")) {
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
}
if (!require("ggmap")) install.packages("ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
install.packages("ggplot2")
install_github('arilamstein/choroplethrZip@v1.5.0')
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
install.packages("choroplethr")
install.packages("ggplot2")
install.packages("ggmap")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip")) install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) {
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
}
if (!require("ggmap")) install.packages("ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
NYC_map = get_googlemap(center = "New York", maptype = "roadmap",
zoom = 11, size = c(640, 420), color = "bw")
ggmap(NYC_map, extent = "device") +
geom_point(data = mh2009.selgeo, aes(x = lon, y = lat),
color = "#0571b0", size = 3)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
library(ggmap)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
names(mh2009.selgeo)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
down vote
I ran into this problem as well today, and I had to install the GitHub development versions of ggplot2 and ggmap and restart R to get rid of this error:
devtools::install_github("dkahle/ggmap")
down vote
I ran into this problem as well today, and I had to install the GitHub development versions of ggplot2 and ggmap and restart R to get rid of this error:
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap", force=TRUE)
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=9,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=13,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
shiny::runApp('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
if(!require("ggmap")) install.packages('ggmap')
library(choroplethrZip)
if (!require("choroplethrZip")) install.packages("choroplethrZip")
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
View(mh2009.selgeo)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(30)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
mh2009.selgeo=mh2009.selgeo%>%
na.omit()
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
View(mh2009.selgeo)
library(ggmap)
ggmap(get_map("New York City",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybird",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybrid",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybrid",
zoom=12, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("Manhattan",source="google",
maptype = "hybrid",
zoom=12, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
library(shiny)
ui<-fluidPage(
checkboxInput('Manhaton','brooklin',FALSE),
)
library(shiny)
ui<-fluidPage(
checkboxInput('Manhaton','brooklin',FALSE)
)
## Only run examples in interactive R sessions
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
## Only run examples in interactive R sessions
ui <- fluidPage(
checkboxInput("somevalue", "Some value", value  = FALSE),
#verbatimTextOutput("value")
)
## Only run examples in interactive R sessions
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE)
#verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
library(shiny)
ui<-fluidPage(
checkboxInput('Manhaton','brooklin',FALSE)
)
server<-function(input,output){}
shinyApp(server = server,ui = ui)
# Define UI for app that draws a histogram ----
#为应用（app）定义生成直方图的UI ----
ui <- fluidPage(
# App title ----
# App 标题 ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
# 定义包含输入与输出的侧边栏布局 ----
sidebarLayout(
# Sidebar panel for inputs ----
# 输入的侧边栏面板 ----
sidebarPanel(
# Input: Slider for the number of bins ----
# 输入：对应直方图区间数的滑动条 ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
# 显示输出的主面板 ----
mainPanel(
# Output: Histogram ----
# 输出：直方图 ----
plotOutput(outputId = "distPlot")
)
)
# Define UI for app that draws a histogram ----
#为应用（app）定义生成直方图的UI ----
ui <- fluidPage(
# App title ----
# App 标题 ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
# 定义包含输入与输出的侧边栏布局 ----
sidebarLayout(
# Sidebar panel for inputs ----
# 输入的侧边栏面板 ----
sidebarPanel(
# Input: Slider for the number of bins ----
# 输入：对应直方图区间数的滑动条 ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
# 显示输出的主面板 ----
mainPanel(
# Output: Histogram ----
# 输出：直方图 ----
plotOutput(outputId = "distPlot")
)
)
# Define UI for app that draws a histogram ----
#为应用（app）定义生成直方图的UI ----
ui <- fluidPage(
# App title ----
# App 标题 ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
# 定义包含输入与输出的侧边栏布局 ----
sidebarLayout(
# Sidebar panel for inputs ----
# 输入的侧边栏面板 ----
sidebarPanel(
# Input: Slider for the number of bins ----
# 输入：对应直方图区间数的滑动条 ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
# 显示输出的主面板 ----
mainPanel(
# Output: Histogram ----
# 输出：直方图 ----
plotOutput(outputId = "distPlot")
)
)
)
server<-function(input,output){}
shinyApp(server = server,ui = ui)
# Define UI for app that draws a histogram ----
#为应用（app）定义生成直方图的UI ----
ui <- fluidPage(
# App title ----
# App 标题 ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
# 定义包含输入与输出的侧边栏布局 ----
sidebarLayout(
# Sidebar panel for inputs ----
# 输入的侧边栏面板 ----
sidebarPanel(
# Input: Slider for the number of bins ----
# 输入：对应直方图区间数的滑动条 ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
# 显示输出的主面板 ----
mainPanel(
# Output: Histogram ----
# 输出：直方图 ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
# 定义生成直方图所需的server逻辑 ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
------------------------------------------------------------------
# 根据Old Faithful Geyser（老实泉）数据生成的直方图 ----
# 区间数为用户定义 ----
# 这个生成直方图的语句被封装在一个叫做renderPlot的函数中
# 它说明了：
#
# 1. 它是“响应式”的，因而应该随着inputs (input$bins)的
#    改变而自动执行
# 2. 它输出的格式是一个图表
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(server = server,ui = ui)
library(shiny)
ui<-fluidPage(
titlePanel('Group 8 proj 2'),
checkboxInput('Manhaton','brooklin',FALSE)
)
server<-function(input,output){}
shinyApp(server = server,ui = ui)
library(shiny)
ui<-fluidPage(
titlePanel('Group 8 proj 2'),
checkboxInput('Manhaton','brooklin',FALSE),
checkboxInput('Manhaton2','brooklin3',FALSE)
)
server<-function(input,output){}
shinyApp(server = server,ui = ui)
library(shiny)
ui<-fluidPage(
titlePanel('Group 8 proj 2'),
checkboxInput(inputId = 'datafrom brooklyn',label ='Brooklyn',value = FALSE),
checkboxInput('Manhaton2','Bronx',FALSE)
)
server<-function(input,output){}
shinyApp(server = server,ui = ui)
library(shiny)
ui<-fluidPage(
titlePanel('Group 8 proj 2'),
checkboxInput(inputId = 'datafrom brooklyn',label ='Brooklyn',value = FALSE),
checkboxInput(inputId = 'datafrom bronx',label = 'Bronx',FALSE),
plotOutput("hist")
)
server<-function(input,output){}
shinyApp(server = server,ui = ui)
library(shiny)
ui<-fluidPage(
titlePanel('Group 8 proj 2'),
checkboxInput(inputId = 'datafrom brooklyn',label ='Brooklyn',value = FALSE),
checkboxInput(inputId = 'datafrom bronx',label = 'Bronx',FALSE),
plotOutput("hist")
)
server<-function(input,output){}
shinyApp(server = server,ui = ui)
install.packages("googleVis")
install.packages("leaflet")
runApp('C:/Users/BurningBamboo/Desktop/fall2019-proj2--sec2-grp8/app')
runApp('C:/Users/BurningBamboo/Desktop/fall2019-proj2--sec2-grp8/app')
runApp()
activities <- read.csv("/Users/lihao/Documents/GitHub/fall2019-proj2--sec2-grp8/app/www/data/activities_processed.csv")
runApp()
runApp('C:/Users/BurningBamboo/Desktop/fall2019-proj2--sec2-grp8/app')
